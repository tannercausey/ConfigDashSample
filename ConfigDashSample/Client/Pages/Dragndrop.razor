@page "/Drag'n'Drop"
@using ConfigDashSample.Shared
@using ConfigDashSample.Shared.Models
@using ConfigDashSample.Shared.Services
@using ConfigDashSample.Client.Components
@inject LocalStorage LocalStorage
@inject TilesDataService TilesData

<PageTitle>Dragndrop</PageTitle>

<h3>Dragndrop
	<TelerikButton Icon="pencil" Title="@DashboardMode" Class="k-flat" OnClick="@ToggleEditDashboard">
		@DashboardMode
	</TelerikButton>
	<TelerikButton Icon="trash" Title="Reset State" Class="k-flat" OnClick="@ResetState">
		Reset State
	</TelerikButton>
</h3>

<TelerikSplitter Orientation="@SplitterOrientation.Horizontal">
	<SplitterPanes>
		@* Dashboard Tiles *@
		<SplitterPane Resizable="true">
			<TelerikTileLayout
				@ref="@TileLayout"
				Columns="6"
				RowHeight="145px"
				ColumnWidth="350px"
				RowSpacing="1em"
				ColumnSpacing="1em"
				Reorderable="true"
				Resizable="true"
				OnResize="@ResizeCharts"
			>
				<TileLayoutItems>
					@{
						if (TileItems != null)
						{
							foreach (var item in TileItems)
							{
								if (item.Visible)
								{
									<TileLayoutItem @key="@item" RowSpan="@item.RowSpan" ColSpan="@item.ColSpan">
										<HeaderTemplate>
											<div class="k-hbox" style="justify-content: space-between">
												<span>@item.Title</span>
												@if (DashboardMode == "Save")
												{
													//<span onpointerdown="stopPropagation(event)">
													<TelerikButton Icon="close" Title="Delete tile" Class="k-flat" OnClick="@(() => Remove(item))"></TelerikButton>
													//</span>
												}
											</div>
										</HeaderTemplate>
										<Content>
											<CascadingValue Value="@ResizeContext" IsFixed="true">
												<TileContentFactory TileContent="@item.Content"></TileContentFactory>
											</CascadingValue>
										</Content>
									</TileLayoutItem>
								}
							}
						}
					}
				</TileLayoutItems>
			</TelerikTileLayout>
		</SplitterPane>
		@if (DashboardMode == "Save") {	// OK yes the logic is a bit backwards here, but I'm not sure how else to do it
			@* Tiles to add *@
			<SplitterPane Resizable="false" Size="250px">
				<div class="k-card-list" style="background-color: #D3D3D3; border-left: 2px solid #BCBCBC; padding:10px;">
					@foreach (var item in TileItems)
					{
						<TelerikCard ThemeColor="@(item.Visible ? "secondary" : "light")">
							<CardHeader>
								<CardTitle>@item.Title</CardTitle>
							</CardHeader>
							<CardActions Layout="@CardActionsLayout.Stretched">
								<TelerikButton Icon="plus" Title="Add tile" Enabled="!item.Visible" Class="k-flat" OnClick="@(() => Add(item))">Add</TelerikButton>
							</CardActions>
						</TelerikCard>
					}
				</div>
			</SplitterPane>
		}
	</SplitterPanes>
</TelerikSplitter>
@code {
	//public IEnumerable<PodcastsViewModel> Podcasts { get; set; }
	string stateKey = "dashtiles";
	TelerikTileLayout? TileLayout { get; set; }
	TileLayoutState State { get; set; }
	string DashboardMode { get; set; } = "Edit";
	public List<TileItem> TileItems { get; set; }
	public ResizeContext ResizeContext { get; set; } = new();
	//protected override void OnInitialized() => LoadState();
	async Task SaveState()
	{
		TileLayoutState state = TileLayout.GetState();
		await LocalStorage.SetItem(stateKey, state);
	}
	protected override async Task OnInitializedAsync()
	{
		await LoadState();
		if (TileItems == null)
			TileItems = await TilesData.GetTilesDataAsync();

		//Podcasts = await DataService.GetPodcasts();
		//OnInitialized();
		base.OnInitialized();
	}

	void ResizeCharts() => ResizeContext.NotifyResizeInvoked();

	private void ToggleEditDashboard()
	{
		if (DashboardMode == "Save")
			SaveState();
		DashboardMode = (DashboardMode == "Save") ? "Edit" : "Save";
	}
	private void Add(TileItem item) => item.Visible = true;
	private void Remove(TileItem item) => item.Visible = false;
	async Task LoadState()
	{
		TileLayoutState state = await LocalStorage.GetItem<TileLayoutState>(stateKey);
		if (state != null)
		{
			TileLayout.SetState(state);
		}
		else
			TileItems = await TilesData.GetTilesDataAsync();
	}
	async Task ResetState()
	{
		await LocalStorage.SetItem(stateKey, null);
		TileItems = await TilesData.GetTilesDataAsync();
	}
}